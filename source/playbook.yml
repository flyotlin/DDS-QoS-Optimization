---
- name: Set up experiment
  hosts: all
  vars_files:
    - set_up_vars.yaml
  tasks:
    - name: Delete Log Files
      ansible.builtin.file:
        path: "{{ logPath }}"
        state: absent

    - name: Delete Flag Files
      ansible.builtin.file:
        path: "{{ basePath }}/.flag"
        state: absent

    - name: Clone Repo
      ansible.builtin.git:
        repo: "{{ repoUrl }}"
        dest: "{{ repoPath }}"

    - name: Generate init.sh
      ansible.builtin.template:
        src: template/init.sh.j2
        dest: "{{ basePath }}/init.sh"

    - name: Run init.sh
      ansible.builtin.command: "bash {{ basePath }}/init.sh"

    - name: Generate create.sh
      ansible.builtin.template:
        src: template/create.sh.j2
        dest: "{{ basePath }}/create.sh"

    - name: Generate .flag
      ansible.builtin.copy:
        dest: "{{ basePath }}/.flag"
        content: 0

    - name: Restore log directory on hosts
      ansible.builtin.file:
        path: "{{ logPath }}"
        state: directory

    - name: Run kill.sh
      ansible.builtin.script:
        cmd: script/kill.sh

- name: Set up Host 1
  hosts: host1
  vars_files:
    - host1_vars.yaml
  tasks:
    - name: Create publishers
      ansible.builtin.command: "bash {{ basePath }}/create.sh {{ item.split(':')[0] }} {{ topicPrefix }}_{{ item.split(':')[1] }} {{ item.split(':')[2] }} {{ item.split(':')[3] }}"
      loop: "{{ entities }}"
      when: item is regex('^p.*')
    - name: Create subscribers
      ansible.builtin.command: "bash {{ basePath }}/create.sh {{ item.split(':')[0] }} {{ topicPrefix }}_{{ item.split(':')[1] }} {{ item.split(':')[2] }}"
      loop: "{{ entities }}"
      when: item is regex('^s.*')

- name: Set up Host 2
  hosts: host2
  vars_files:
    - host2_vars.yaml
  tasks:
    - name: Create publishers
      ansible.builtin.command: "bash {{ basePath }}/create.sh {{ item.split(':')[0] }} {{ topicPrefix }}_{{ item.split(':')[1] }} {{ item.split(':')[2] }} {{ item.split(':')[3] }}"
      loop: "{{ entities }}"
      when: item is regex('^p.*')
    - name: Create subscribers
      ansible.builtin.command: "bash {{ basePath }}/create.sh {{ item.split(':')[0] }} {{ topicPrefix }}_{{ item.split(':')[1] }} {{ item.split(':')[2] }}"
      loop: "{{ entities }}"
      when: item is regex('^s.*')

- name: Set up Host 3
  hosts: host3
  vars_files:
    - host3_vars.yaml
  tasks:
    - name: Create publishers
      ansible.builtin.command: "bash {{ basePath }}/create.sh {{ item.split(':')[0] }} {{ topicPrefix }}_{{ item.split(':')[1] }} {{ item.split(':')[2] }} {{ item.split(':')[3] }}"
      loop: "{{ entities }}"
      when: item is regex('^p.*')
    - name: Create subscribers
      ansible.builtin.command: "bash {{ basePath }}/create.sh {{ item.split(':')[0] }} {{ topicPrefix }}_{{ item.split(':')[1] }} {{ item.split(':')[2] }}"
      loop: "{{ entities }}"
      when: item is regex('^s.*')

- name: Set up Host 4
  hosts: host4
  vars_files:
    - host4_vars.yaml
  tasks:
    - name: Create publishers
      ansible.builtin.command: "bash {{ basePath }}/create.sh {{ item.split(':')[0] }} {{ topicPrefix }}_{{ item.split(':')[1] }} {{ item.split(':')[2] }} {{ item.split(':')[3] }}"
      loop: "{{ entities }}"
      when: item is regex('^p.*')
    - name: Create subscribers
      ansible.builtin.command: "bash {{ basePath }}/create.sh {{ item.split(':')[0] }} {{ topicPrefix }}_{{ item.split(':')[1] }} {{ item.split(':')[2] }}"
      loop: "{{ entities }}"
      when: item is regex('^s.*')

- name: Start all publishers and subscribers
  hosts: all
  vars_files:
    - control_vars.yaml
  tasks:
    - name: Change `.flag`'s value
      ansible.builtin.copy:
        dest: "{{ basePath }}/.flag"
        content: 1

- name: Collect logs
  hosts: all
  vars_files:
    - logs_vars.yaml
  tasks:
    - name: Wait for timeout
      ansible.builtin.wait_for:
        timeout: "{{ wait_for_timeout }}"

    - name: Collect publisher/subscriber logs
      ansible.builtin.fetch:
        src: "{{ logPath }}/{{ item | split(':') | first }}.log"
        dest: "{{ collectedLogPath }}/"
        flat: yes
        fail_on_missing: no
      loop: "{{ entities }}"
